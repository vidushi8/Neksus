// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Message {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_descriptor_ = file->message_type(0);
  static const int PacketHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, tick_freq_),
  };
  PacketHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketHeader_descriptor_,
      PacketHeader::internal_default_instance(),
      PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _has_bits_),
      -1,
      -1,
      sizeof(PacketHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _internal_metadata_));
  Packet_descriptor_ = file->message_type(1);
  static const int Packet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, pkt_id_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::internal_default_instance(),
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_),
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketHeader_descriptor_, PacketHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, Packet::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  PacketHeader_default_instance_.Shutdown();
  delete PacketHeader_reflection_;
  Packet_default_instance_.Shutdown();
  delete Packet_reflection_;
}

void protobuf_InitDefaults_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  PacketHeader_default_instance_.DefaultConstruct();
  Packet_default_instance_.DefaultConstruct();
  PacketHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  Packet_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_packet_2eproto_once_);
void protobuf_InitDefaults_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_packet_2eproto_once_,
                 &protobuf_InitDefaults_packet_2eproto_impl);
}
void protobuf_AddDesc_packet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_packet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\007Message\"A\n\014PacketHeader\022"
    "\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \001(\r:\0010\022\021\n\ttick_"
    "freq\030\003 \002(\004\"^\n\006Packet\022\014\n\004tick\030\001 \002(\004\022\013\n\003cm"
    "d\030\002 \002(\r\022\014\n\004addr\030\003 \002(\004\022\014\n\004size\030\004 \002(\r\022\r\n\005f"
    "lags\030\005 \001(\r\022\016\n\006pkt_id\030\006 \001(\004", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_packet_2eproto_once_);
void protobuf_AddDesc_packet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_packet_2eproto_once_,
                 &protobuf_AddDesc_packet_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeader::kObjIdFieldNumber;
const int PacketHeader::kVerFieldNumber;
const int PacketHeader::kTickFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeader::PacketHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.PacketHeader)
}

void PacketHeader::InitAsDefaultInstance() {
}

PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Message.PacketHeader)
}

void PacketHeader::SharedCtor() {
  _cached_size_ = 0;
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_freq_, 0, reinterpret_cast<char*>(&ver_) -
    reinterpret_cast<char*>(&tick_freq_) + sizeof(ver_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:Message.PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_descriptor_;
}

const PacketHeader& PacketHeader::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PacketHeader> PacketHeader_default_instance_;

PacketHeader* PacketHeader::New(::google::protobuf::Arena* arena) const {
  PacketHeader* n = new PacketHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.PacketHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PacketHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(tick_freq_, ver_);
    if (has_obj_id()) {
      obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.PacketHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string obj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj_id().data(), this->obj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Message.PacketHeader.obj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // optional uint32 ver = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ver:
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tick_freq;
        break;
      }

      // required uint64 tick_freq = 3;
      case 3: {
        if (tag == 24) {
         parse_tick_freq:
          set_has_tick_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_freq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.PacketHeader)
  return false;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.PacketHeader)
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Message.PacketHeader.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->obj_id(), output);
  }

  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tick_freq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.PacketHeader)
}

::google::protobuf::uint8* PacketHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.PacketHeader)
  // required string obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_id().data(), this->obj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Message.PacketHeader.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->obj_id(), target);
  }

  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint64 tick_freq = 3;
  if (has_tick_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tick_freq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.PacketHeader)
  return target;
}

size_t PacketHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Message.PacketHeader)
  size_t total_size = 0;

  if (has_obj_id()) {
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  if (has_tick_freq()) {
    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());
  }

  return total_size;
}
size_t PacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.PacketHeader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string obj_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());

    // required uint64 tick_freq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick_freq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 ver = 2 [default = 0];
  if (has_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.PacketHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PacketHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.PacketHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.PacketHeader)
    UnsafeMergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.PacketHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PacketHeader::UnsafeMergeFrom(const PacketHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_has_obj_id();
      obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_tick_freq()) {
      set_tick_freq(from.tick_freq());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.PacketHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeader::InternalSwap(PacketHeader* other) {
  obj_id_.Swap(&other->obj_id_);
  std::swap(ver_, other->ver_);
  std::swap(tick_freq_, other->tick_freq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_descriptor_;
  metadata.reflection = PacketHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHeader

// required string obj_id = 1;
bool PacketHeader::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHeader::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHeader::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHeader::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obj_id();
}
const ::std::string& PacketHeader::obj_id() const {
  // @@protoc_insertion_point(field_get:Message.PacketHeader.obj_id)
  return obj_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketHeader::set_obj_id(const ::std::string& value) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.PacketHeader.obj_id)
}
void PacketHeader::set_obj_id(const char* value) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.PacketHeader.obj_id)
}
void PacketHeader::set_obj_id(const char* value, size_t size) {
  set_has_obj_id();
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.PacketHeader.obj_id)
}
::std::string* PacketHeader::mutable_obj_id() {
  set_has_obj_id();
  // @@protoc_insertion_point(field_mutable:Message.PacketHeader.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketHeader::release_obj_id() {
  // @@protoc_insertion_point(field_release:Message.PacketHeader.obj_id)
  clear_has_obj_id();
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketHeader::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    set_has_obj_id();
  } else {
    clear_has_obj_id();
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:Message.PacketHeader.obj_id)
}

// optional uint32 ver = 2 [default = 0];
bool PacketHeader::has_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHeader::set_has_ver() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHeader::clear_has_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHeader::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
::google::protobuf::uint32 PacketHeader::ver() const {
  // @@protoc_insertion_point(field_get:Message.PacketHeader.ver)
  return ver_;
}
void PacketHeader::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:Message.PacketHeader.ver)
}

// required uint64 tick_freq = 3;
bool PacketHeader::has_tick_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketHeader::set_has_tick_freq() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketHeader::clear_has_tick_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketHeader::clear_tick_freq() {
  tick_freq_ = GOOGLE_ULONGLONG(0);
  clear_has_tick_freq();
}
::google::protobuf::uint64 PacketHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:Message.PacketHeader.tick_freq)
  return tick_freq_;
}
void PacketHeader::set_tick_freq(::google::protobuf::uint64 value) {
  set_has_tick_freq();
  tick_freq_ = value;
  // @@protoc_insertion_point(field_set:Message.PacketHeader.tick_freq)
}

inline const PacketHeader* PacketHeader::internal_default_instance() {
  return &PacketHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kTickFieldNumber;
const int Packet::kCmdFieldNumber;
const int Packet::kAddrFieldNumber;
const int Packet::kSizeFieldNumber;
const int Packet::kFlagsFieldNumber;
const int Packet::kPktIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_packet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.Packet)
}

void Packet::InitAsDefaultInstance() {
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Message.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tick_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&tick_) + sizeof(flags_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Message.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  protobuf_InitDefaults_packet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Packet> Packet_default_instance_;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.Packet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Packet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Packet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tick_, flags_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tick = 1;
      case 1: {
        if (tag == 8) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addr;
        break;
      }

      // required uint64 addr = 3;
      case 3: {
        if (tag == 24) {
         parse_addr:
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (tag == 40) {
         parse_flags:
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pkt_id;
        break;
      }

      // optional uint64 pkt_id = 6;
      case 6: {
        if (tag == 48) {
         parse_pkt_id:
          set_has_pkt_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkt_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.Packet)
  // required uint64 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tick(), output);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // required uint64 addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->addr(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint64 pkt_id = 6;
  if (has_pkt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkt_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message.Packet)
  // required uint64 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tick(), target);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // required uint64 addr = 3;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->addr(), target);
  }

  // required uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional uint64 pkt_id = 6;
  if (has_pkt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pkt_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.Packet)
  return target;
}

size_t Packet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Message.Packet)
  size_t total_size = 0;

  if (has_tick()) {
    // required uint64 tick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick());
  }

  if (has_cmd()) {
    // required uint32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());
  }

  if (has_addr()) {
    // required uint64 addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_size()) {
    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  return total_size;
}
size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.Packet)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 tick = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tick());

    // required uint32 cmd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());

    // required uint64 addr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required uint32 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint64 pkt_id = 6;
    if (has_pkt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkt_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.Packet)
    UnsafeMergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.Packet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Packet::UnsafeMergeFrom(const Packet& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_pkt_id()) {
      set_pkt_id(from.pkt_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.Packet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(tick_, other->tick_);
  std::swap(cmd_, other->cmd_);
  std::swap(addr_, other->addr_);
  std::swap(size_, other->size_);
  std::swap(flags_, other->flags_);
  std::swap(pkt_id_, other->pkt_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// required uint64 tick = 1;
bool Packet::has_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Packet::set_has_tick() {
  _has_bits_[0] |= 0x00000001u;
}
void Packet::clear_has_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
void Packet::clear_tick() {
  tick_ = GOOGLE_ULONGLONG(0);
  clear_has_tick();
}
::google::protobuf::uint64 Packet::tick() const {
  // @@protoc_insertion_point(field_get:Message.Packet.tick)
  return tick_;
}
void Packet::set_tick(::google::protobuf::uint64 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.tick)
}

// required uint32 cmd = 2;
bool Packet::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Packet::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Packet::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Packet::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
::google::protobuf::uint32 Packet::cmd() const {
  // @@protoc_insertion_point(field_get:Message.Packet.cmd)
  return cmd_;
}
void Packet::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.cmd)
}

// required uint64 addr = 3;
bool Packet::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Packet::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void Packet::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Packet::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
::google::protobuf::uint64 Packet::addr() const {
  // @@protoc_insertion_point(field_get:Message.Packet.addr)
  return addr_;
}
void Packet::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.addr)
}

// required uint32 size = 4;
bool Packet::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Packet::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Packet::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Packet::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 Packet::size() const {
  // @@protoc_insertion_point(field_get:Message.Packet.size)
  return size_;
}
void Packet::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.size)
}

// optional uint32 flags = 5;
bool Packet::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Packet::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void Packet::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void Packet::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 Packet::flags() const {
  // @@protoc_insertion_point(field_get:Message.Packet.flags)
  return flags_;
}
void Packet::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.flags)
}

// optional uint64 pkt_id = 6;
bool Packet::has_pkt_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Packet::set_has_pkt_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Packet::clear_has_pkt_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Packet::clear_pkt_id() {
  pkt_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pkt_id();
}
::google::protobuf::uint64 Packet::pkt_id() const {
  // @@protoc_insertion_point(field_get:Message.Packet.pkt_id)
  return pkt_id_;
}
void Packet::set_pkt_id(::google::protobuf::uint64 value) {
  set_has_pkt_id();
  pkt_id_ = value;
  // @@protoc_insertion_point(field_set:Message.Packet.pkt_id)
}

inline const Packet* Packet::internal_default_instance() {
  return &Packet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)
